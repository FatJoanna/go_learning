import java.io.File

svtype = ''
env = ''
branch = ''
repos = ''
userInput=''
env=''
g_deploy_state = 0

mai_py2_svtype_list = """
ge
qr
sug
web
webreg
usertag
saab
finance
gossip_algo
headline_rec
headline_dbg
company_match
"""

mai_svtype_list = """
ads
qr
im
file
account
gcs_agent
gcs
pbs
userprofile
pay
maicoin
jobs
member
feed
gossip
headline
enterprise
company
sprofile
sug
growth
growth_api
network
creative
finance
experience
api
touch
censor
censor_admin
polaris_admin
billionaire
pastor
"""

node_map = [
    '主 node [node_main]': 'node_main',
    '实名 node [node_content]': 'node_content',
    '招聘 node [node_jobs]': 'node_jobs',
    '招聘 node [node_bizjobs]': 'node_bizjobs',
    '客服 node [node_cs]': 'node_cs',
    '配置中心 node [node_dash]': 'node_dash',
    'pn node [node_profile]': 'node_profile',
    '人才银行 node [enterprise_fe]': 'enterprise_fe',
    '增长 node [node_growth]': 'node_growth',
    '会员 node [node_bizmember]': 'node_bizmember',
]

maigo_svtype_list = """go_org_orgserver
go_fp_fpserver
go_org_orgserver
go_gossip_darwin
go_gossip_darwinbg
go_gossip_tagging
go_jesus
go_pbs
go_im

"""

service_repos = """
py2
py3
node
go
"""

service_map = [
    'py2': mai_py2_svtype_list,
    'py3': mai_svtype_list,
    'node': [],
    'go': maigo_svtype_list
]

group_name_list="""无
jobs
pn
content
platform
growth
"""


node {
   try {
       stage('Preparation') {
            repos = input id: "input git repos name", message: "请选择 git repos",
            parameters: [
                choice(
                    name: "name",
                    choices: service_map.keySet().collect().join("\n"),
                    description: "service repos\n"
                ),
            ]

            if ( repos == "node" ) {
                service_list = node_map.keySet().collect().join("\n")
            } else {
                service_list = service_map[repos]
            }

            userInput = input id: "input deploy params", message: "请填写部署信息",
            parameters: [
                string(name: "env", defaultValue: "", description: "流量标签名称，用于流量特定转发，格式：[a-z0-9]([-a-z0-9]*[a-z0-9])?（不要用下划线和大写字母哈）"),
                choice(
                    name: "name",
                    choices: service_list,
                    description: "service name"
                ),
                string(name: "branch", defaultValue: "feature branch/commit", description: "分支名称或者 commit id"),
            ]

            svtype = userInput.name
            if ( repos == "node") {
                svtype = node_map[userInput.name]
            }

            env = userInput.env
            branch = userInput.branch

            if (branch == "" || env == ""){
                print "参数错误"
            }
       }
       println userInput
   } catch (exc) {
       println exc
       println userInput
       g_deploy_state = 1
   }

   try {
       stage('Pre Deploy') {
            timeout(time: 1, unit: "MINUTES") {
                def cmd = "echo pre deloy"
                sh cmd
            }
       }

       stage('Build') {
            timeout(time: 30, unit: "MINUTES") {
                def cmd = "echo build"
                sh cmd
            }
       }

       stage('Deploy&Monitor') {
            timeout(time: 10, unit: "MINUTES") {
                def cmd = "echo deploy"
                sh cmd
       }
   }

       stage('Check&Detail') {
            timeout(time: 10, unit: "MINUTES") {
                def cmd = "echo check"
                sh cmd
            }
       }
   } catch (exc) {
       println exc
       g_deploy_state = 1
   }

   stage('Post Deploy') {
        switch (g_deploy_state) {
            case 0:
                currentBuild.result = "SUCCESS"
                break;
            case 1:
                currentBuild.result = "FAILURE"
                break;
            default:
                currentBuild.result = "FAILURE"
        }
   }
}

